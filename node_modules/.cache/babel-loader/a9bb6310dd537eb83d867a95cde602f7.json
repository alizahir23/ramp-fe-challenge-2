{"ast":null,"code":"var _jsxFileName = \"/Users/alizahir/Downloads/ramp-fe-challenge 2/src/components/Transactions/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback } from \"react\";\nimport { useCustomFetch } from \"src/hooks/useCustomFetch\";\nimport { TransactionPane } from \"./TransactionPane\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Transactions = _ref => {\n  _s();\n\n  let {\n    transactions\n  } = _ref;\n  const {\n    fetchWithoutCache,\n    loading\n  } = useCustomFetch();\n  const setTransactionApproval = useCallback(async _ref2 => {\n    let {\n      transactionId,\n      newValue\n    } = _ref2;\n    await fetchWithoutCache(\"setTransactionApproval\", {\n      transactionId,\n      value: newValue\n    }); // Find the index of the transaction to update\n\n    const transactionIndex = data.transactions.findIndex(currentTransaction => currentTransaction.id === transactionId); // If the transaction is not found, throw an error\n\n    if (transactionIndex === -1) {\n      throw new Error(\"Invalid transaction to approve\");\n    } // Update the transaction value at the found index\n\n\n    data.transactions[transactionIndex] = { ...data.transactions[transactionIndex],\n      approved: value\n    };\n  }, [fetchWithoutCache]);\n\n  if (transactions === null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"RampLoading--container\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    \"data-testid\": \"transaction-container\",\n    children: transactions.map(transaction => /*#__PURE__*/_jsxDEV(TransactionPane, {\n      transaction: transaction,\n      loading: loading,\n      setTransactionApproval: setTransactionApproval\n    }, transaction.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Transactions, \"3TeCR/OJhEdaHp00JQf6jBdD3oc=\", false, function () {\n  return [useCustomFetch];\n});\n\n_c = Transactions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Transactions\");","map":{"version":3,"names":["useCallback","useCustomFetch","TransactionPane","Transactions","transactions","fetchWithoutCache","loading","setTransactionApproval","transactionId","newValue","value","transactionIndex","data","findIndex","currentTransaction","id","Error","approved","map","transaction"],"sources":["/Users/alizahir/Downloads/ramp-fe-challenge 2/src/components/Transactions/index.tsx"],"sourcesContent":["import { useCallback } from \"react\"\nimport { useCustomFetch } from \"src/hooks/useCustomFetch\"\nimport { SetTransactionApprovalParams } from \"src/utils/types\"\nimport { TransactionPane } from \"./TransactionPane\"\nimport { SetTransactionApprovalFunction, TransactionsComponent } from \"./types\"\n\nexport const Transactions: TransactionsComponent = ({ transactions }) => {\n  const { fetchWithoutCache, loading } = useCustomFetch()\n\n  const setTransactionApproval = useCallback<SetTransactionApprovalFunction>(\n    async ({ transactionId, newValue }) => {\n      await fetchWithoutCache<void, SetTransactionApprovalParams>(\"setTransactionApproval\", {\n        transactionId,\n        value: newValue,\n      })\n      // Find the index of the transaction to update\n      const transactionIndex = data.transactions.findIndex(\n        (currentTransaction) => currentTransaction.id === transactionId\n      )\n\n      // If the transaction is not found, throw an error\n      if (transactionIndex === -1) {\n        throw new Error(\"Invalid transaction to approve\")\n      }\n\n      // Update the transaction value at the found index\n      data.transactions[transactionIndex] = {\n        ...data.transactions[transactionIndex],\n        approved: value,\n      }\n    },\n    [fetchWithoutCache]\n  )\n\n  if (transactions === null) {\n    return <div className=\"RampLoading--container\">Loading...</div>\n  }\n\n  return (\n    <div data-testid=\"transaction-container\">\n      {transactions.map((transaction) => (\n        <TransactionPane\n          key={transaction.id}\n          transaction={transaction}\n          loading={loading}\n          setTransactionApproval={setTransactionApproval}\n        />\n      ))}\n    </div>\n  )\n}\n"],"mappings":";;;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,cAAT,QAA+B,0BAA/B;AAEA,SAASC,eAAT,QAAgC,mBAAhC;;AAGA,OAAO,MAAMC,YAAmC,GAAG,QAAsB;EAAA;;EAAA,IAArB;IAAEC;EAAF,CAAqB;EACvE,MAAM;IAAEC,iBAAF;IAAqBC;EAArB,IAAiCL,cAAc,EAArD;EAEA,MAAMM,sBAAsB,GAAGP,WAAW,CACxC,eAAuC;IAAA,IAAhC;MAAEQ,aAAF;MAAiBC;IAAjB,CAAgC;IACrC,MAAMJ,iBAAiB,CAAqC,wBAArC,EAA+D;MACpFG,aADoF;MAEpFE,KAAK,EAAED;IAF6E,CAA/D,CAAvB,CADqC,CAKrC;;IACA,MAAME,gBAAgB,GAAGC,IAAI,CAACR,YAAL,CAAkBS,SAAlB,CACtBC,kBAAD,IAAwBA,kBAAkB,CAACC,EAAnB,KAA0BP,aAD3B,CAAzB,CANqC,CAUrC;;IACA,IAAIG,gBAAgB,KAAK,CAAC,CAA1B,EAA6B;MAC3B,MAAM,IAAIK,KAAJ,CAAU,gCAAV,CAAN;IACD,CAboC,CAerC;;;IACAJ,IAAI,CAACR,YAAL,CAAkBO,gBAAlB,IAAsC,EACpC,GAAGC,IAAI,CAACR,YAAL,CAAkBO,gBAAlB,CADiC;MAEpCM,QAAQ,EAAEP;IAF0B,CAAtC;EAID,CArBuC,EAsBxC,CAACL,iBAAD,CAtBwC,CAA1C;;EAyBA,IAAID,YAAY,KAAK,IAArB,EAA2B;IACzB,oBAAO;MAAK,SAAS,EAAC,wBAAf;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP;EACD;;EAED,oBACE;IAAK,eAAY,uBAAjB;IAAA,UACGA,YAAY,CAACc,GAAb,CAAkBC,WAAD,iBAChB,QAAC,eAAD;MAEE,WAAW,EAAEA,WAFf;MAGE,OAAO,EAAEb,OAHX;MAIE,sBAAsB,EAAEC;IAJ1B,GACOY,WAAW,CAACJ,EADnB;MAAA;MAAA;MAAA;IAAA,QADD;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAYD,CA5CM;;GAAMZ,Y;UAC4BF,c;;;KAD5BE,Y"},"metadata":{},"sourceType":"module"}